package mysrc.client.test;

import java.net.InetAddress;

import ke.client.ClientRingDynamics;
import ke.client.ClientRingStateParser;
import ke.data.CONSTANT;
import mysrc.Util;
import mysrc.handevaluator.Board;
import mysrc.handevaluator.Hand;
import mysrc.handevaluator.HandRank;
import ca.ualberta.cs.poker.free.client.PokerClient;
import ca.ualberta.cs.poker.free.dynamics.Card;
import ca.ualberta.cs.poker.free.dynamics.LimitType;
import ca.ualberta.cs.poker.free.dynamics.MatchType;

public class TestPlayer extends PokerClient {

	public ClientRingDynamics state;
	
    public static void main(String[] args) throws Exception{
    	TestPlayer pp = new TestPlayer();
        System.out.println("Attempting to connect to "+args[0]+" on port "+args[1]+"...");

        pp.connect(InetAddress.getByName(args[0]), Integer.parseInt(args[1]));
        System.out.println("Successful connection!");
        pp.run();
    }

    public synchronized void handleStateChange() {

    	if (state == null) {
    		set_up_new_state_object();
    	}
    	
        state.setFromMatchStateMessage(currentGameStateString);
       	
        if (state.isOurTurn()){
        	System.out.println("-------------------------------------------------------");
        	HandRank handRank = getHandRank(state.hole[state.seatTaken], state.board);
            
            System.out.println("holeCards: " + Util.arrayToString(state.hole[state.seatTaken]));
            System.out.println("boardCards: " + Util.arrayToString(state.board));
            System.out.println("handRank: " + handRank);
            try {
	            if (state.roundIndex == 0) { // preflop
	            	System.out.println("making preflop decision ...");
	            	System.out.println("raise ..."); 
	        		sendRaise();
	            }
	            
	            else { // postflop
	            	System.out.println("making postflop decision ...");
		            
	            	switch (handRank.getRank()) {
		            	case HIGH: 
		            		System.out.println("fold ..."); 
		            		sendFold(); 
		            		break;
		            		
		            	case PAIR: 
		            		System.out.println("call ..."); 
		            		sendCall();
		            		break;
		            		
		            	default: 
		            		System.out.println("raise ..."); 
		            		sendRaise();
	            			break;
	            	}
	            	
					sendRaise();
				}
            }
            catch (Exception e) {
				e.printStackTrace();
			}
	    }
        
        else 
        	System.out.println("nothing to do ...");
    }
    
    /**
     * Bestimmt den HandRank einer Hand in Kombination mit dem Board
     * 
     * @param holeCardsArray
     * @param boardArray
     * @return
     */
    private HandRank getHandRank (Card[] holeCardsArray, Card[] boardArray) {
        Hand holeCards = new Hand();
        Board board = new Board();

    	
    	for (Card card : holeCardsArray)
    		if (card != null)
    			holeCards.addCard(convertCard(card));
    	
    	for (Card card : boardArray)
    		if (card != null)
    			board.addCard(convertCard(card));
    	
    	return holeCards.getHandRank(board);
    }
    
    
    /**
     * Konvertiert eine Karte aus ca/ualberta/cs/poker/free/dynamics in eine mysrc/handevaluator Karte.
     * 
     * @param card zu konvertierende Karte
     * @return eine Karte aus dem handevaluator namespace
     */
    private mysrc.handevaluator.Card convertCard (Card card) {
    	mysrc.handevaluator.Card.Rank rank = mysrc.handevaluator.Card.Rank.values()[card.rank.ordinal()];
    	mysrc.handevaluator.Card.Suit suit = mysrc.handevaluator.Card.Suit.values()[card.suit.ordinal()];
    	
    	return new mysrc.handevaluator.Card (rank, suit);
    }
    
    private void set_up_new_state_object() {
    	ClientRingStateParser crsp = new ClientRingStateParser();
		crsp.parseMatchStateMessage(currentGameStateString);
		MatchType mt = new MatchType(LimitType.LIMIT, false, 8000, 1000);
		CONSTANT.PLAYER_COUNT = crsp.numPlayers;
		CONSTANT.AGGRESSIVE_PREFLOP = new double[crsp.numPlayers];
		CONSTANT.AGGRESSIVE_RAISE = new double[crsp.numPlayers];
		for(int i = 0; i < crsp.numPlayers; i++) {
			CONSTANT.AGGRESSIVE_PREFLOP[i] = CONSTANT.A_PREFLOP;
			CONSTANT.AGGRESSIVE_RAISE[i] = CONSTANT.A_RAISE;
		}
		state = new ClientRingDynamics(crsp.numPlayers, mt, crsp);
		state.setParser(crsp);
//		state.addStateChangeListener(history);
    }
}
