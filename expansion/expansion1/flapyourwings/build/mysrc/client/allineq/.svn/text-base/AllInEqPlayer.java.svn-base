package mysrc.client.allineq;

import java.net.InetAddress;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import ke.client.ClientRingDynamics;
import ke.client.ClientRingStateParser;
import ke.data.CONSTANT;
import mysrc.Util;
import mysrc.handevaluator.Board;
import mysrc.handevaluator.Hand;
import mysrc.handevaluator.HandRank;
import mysrc.search.AllInEquityCalculator;
import ca.ualberta.cs.poker.free.client.PokerClient;
import ca.ualberta.cs.poker.free.dynamics.Card;
import ca.ualberta.cs.poker.free.dynamics.LimitType;
import ca.ualberta.cs.poker.free.dynamics.MatchType;

/**
 * @author Markus Zopf
 *
 */
public class AllInEqPlayer extends PokerClient {

	public ClientRingDynamics state;
	
    public static void main(String[] args) throws Exception{
    	AllInEqPlayer pp = new AllInEqPlayer();
        System.out.println("Attempting to connect to "+args[0]+" on port "+args[1]+"...");

        pp.connect(InetAddress.getByName(args[0]), Integer.parseInt(args[1]));
        System.out.println("Successful connection!");
        pp.run();
    }

    public synchronized void handleStateChange() {

    	if (state == null) {
    		set_up_new_state_object();
    	}
    	
        state.setFromMatchStateMessage(currentGameStateString);
       	
        if (state.isOurTurn()){
        	System.out.println("-------------------------------------------------------");
        	HandRank handRank = getHandRank(state.hole[state.seatTaken], state.board);
            
            System.out.println("holeCards: " + Util.arrayToString(state.hole[state.seatTaken]));
            System.out.println("boardCards: " + Util.arrayToString(state.board));
            System.out.println("handRank: " + handRank);

            try {
	            if (state.roundIndex == 0) { // preflop
	            	System.out.println("making preflop decision ...");
	                double allInEquity = getAllInEquity(state.hole[state.seatTaken], state.board, state.numPlayers-1);
	                System.out.println("allInEquity: " + allInEquity);
		            
	            	if (allInEquity > 1/(double)state.numPlayers) {
	            		System.out.println("raise ...");
	            		sendRaise();
	            	}
	            	
	            	else if (allInEquity > 0.20) {
	            		System.out.println("call ...");
	            		sendCall();
	            	}
	            	
	            	else {
	            		System.out.println("fold ...");
	            		sendFold();
	            	}
	            }
	            
	            else { // postflop
	            	System.out.println("making postflop decision ...");
	                double allInEquity = getAllInEquity(state.hole[state.seatTaken], state.board, state.numPlayers-1);
	                System.out.println("allInEquity: " + allInEquity);
		            
	            	int potsize = 0;
	            	
	            	for (Integer i : state.inPot)
	            		potsize+= i;
	            	
	            	if (allInEquity > 1/(double)state.numPlayers) {
	            		System.out.println("raise ...");
	            		sendRaise();
	            	}
	            	
	            	else if (allInEquity > 0.20) {
	            		System.out.println("call ...");
	            		sendCall();
	            	}
	            	
	            	else {
	            		System.out.println("fold ...");
	            		sendFold();
	            	}
				}
            }
            catch (Exception e) {
				e.printStackTrace();
			}
	    }
        
        else 
        	System.out.println("nothing to do ...");
    }
    
    /**
     * Bestimmt den HandRank einer Hand in Kombination mit dem Board.
     * 
     * @param holeCardsArray
     * @param boardArray
     * @return
     */
    private HandRank getHandRank (Card[] holeCardsArray, Card[] boardArray) {
        Hand holeCards = new Hand();
        Board board = new Board();

    	
    	for (Card card : holeCardsArray)
    		if (card != null)
    			holeCards.addCard(convertCard(card));
    	
    	for (Card card : boardArray)
    		if (card != null)
    			board.addCard(convertCard(card));
    	
    	return holeCards.getHandRank(board);
    }
    
    
    /**
     * Konvertiert eine Karte aus ca/ualberta/cs/poker/free/dynamics in eine mysrc/handevaluator Karte.
     * 
     * @param card zu konvertierende Karte
     * @return eine Karte aus dem handevaluator namespace
     */
    private mysrc.handevaluator.Card convertCard (Card card) {
    	mysrc.handevaluator.Card.Rank rank = mysrc.handevaluator.Card.Rank.values()[card.rank.ordinal()];
    	mysrc.handevaluator.Card.Suit suit = mysrc.handevaluator.Card.Suit.values()[card.suit.ordinal()];
    	
    	return new mysrc.handevaluator.Card (rank, suit);
    }

    /**
     * Berechnet die All In Equity einer Hand durch eine Monte Carlo Simulation.
     * 
     * @param holeCardsArray holeCards von Hero
     * @param boardArray schon bekannte board cards
     * @param villianCount Anzahl Gegner
     * @return
     */
    private double getAllInEquity (Card[] holeCardsArray, Card[] boardArray, int villianCount) {
    	LinkedList<Card> possibleBoardCards;
    	LinkedList<Card[]> possibleVillainHoleCards;
    	LinkedList<HandRank> possibleVillainHandRanks;
    	
    	int win = 0;
    	int tie = 0;
    	int loss = 0;
    	int handsplayed = 0;
    	
    	for (int i = 0; i < 10000; i++) {
        	possibleBoardCards = new LinkedList<Card>();
        	possibleVillainHoleCards = new LinkedList<Card[]>();
        	possibleVillainHandRanks = new LinkedList<HandRank>();
    		
        	ArrayList<Card> allCards = Util.initUnusedCardsCards();
	    	allCards.remove(holeCardsArray[0]);
	    	allCards.remove(holeCardsArray[1]);
    	
	    	for (Card card : boardArray)
	    		allCards.remove(card);
    	
	    	for (Card card : boardArray)
	    		possibleBoardCards.add(card);
	    	
	    	while (allCards.size() > 45) {
	    		possibleBoardCards.add(Util.getAndRemoveRandomCardFromList(allCards));
	    	}
	    	
	    	for (int j = 0; j < villianCount; j++) {
	    		Card[] holeCards = new Card[2];
	    		holeCards[0] = Util.getAndRemoveRandomCardFromList(allCards);
	    		holeCards[1] = Util.getAndRemoveRandomCardFromList(allCards);
	    		possibleVillainHoleCards.add(holeCards);
	    	}
	
	    	for (Card[] holeCards : possibleVillainHoleCards)
	    		possibleVillainHandRanks.add(getHandRank(holeCards, possibleBoardCards));
	    	
	    	HandRank ownRank = getHandRank(holeCardsArray, possibleBoardCards);
	
	    	if (ownRank.compareTo(getMaxHandRank(possibleVillainHandRanks)) < 0) {
	    		loss++;
	    	}
	    	else if (ownRank.compareTo(getMaxHandRank(possibleVillainHandRanks)) > 0) {
	    		win++;
	    	}
	    	else
	    		tie++;
	    	
	    	handsplayed++;
    	}
    	
    	return (win + tie/(float)(villianCount+1))/((float)handsplayed);
    }
    
    /**
     * Bestimmt den höchten Handrank in einer Liste von HandRanks
     * 
     * @param handRanks Liste von HandRanks
     * @return
     */
    private HandRank getMaxHandRank (LinkedList<HandRank> handRanks) {
    	HandRank maxHandRank = handRanks.getFirst();
    	
    	for (HandRank handRank : handRanks)
    		if (maxHandRank.compareTo(handRank) < 0)
    			maxHandRank = handRank;
    	
    	return maxHandRank;
    }
    
    /**
     * Bestimmt den HandRank einer Hand in Kombination mit dem Board.
     * 
     * @param holeCardsArray
     * @param boardList
     * @return
     */
    private HandRank getHandRank (Card[] holeCardsArray, List<Card> boardList) {
    	Card[] boardArray = new Card[boardList.size()];
    	for (int i = 0; i < boardList.size(); i++)
    		boardArray[i] = boardList.get(i);

    	return getHandRank(holeCardsArray, boardArray);
    }
    
    
    private void set_up_new_state_object() {
    	ClientRingStateParser crsp = new ClientRingStateParser();
		crsp.parseMatchStateMessage(currentGameStateString);
		MatchType mt = new MatchType(LimitType.LIMIT, false, 8000, 1000);
		CONSTANT.PLAYER_COUNT = crsp.numPlayers;
		CONSTANT.AGGRESSIVE_PREFLOP = new double[crsp.numPlayers];
		CONSTANT.AGGRESSIVE_RAISE = new double[crsp.numPlayers];
		for(int i = 0; i < crsp.numPlayers; i++) {
			CONSTANT.AGGRESSIVE_PREFLOP[i] = CONSTANT.A_PREFLOP;
			CONSTANT.AGGRESSIVE_RAISE[i] = CONSTANT.A_RAISE;
		}
		state = new ClientRingDynamics(crsp.numPlayers, mt, crsp);
		state.setParser(crsp);
//		state.addStateChangeListener(history);
    }
}
