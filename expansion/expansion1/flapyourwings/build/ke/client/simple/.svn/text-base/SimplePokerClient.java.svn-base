package ke.client.simple;

import ke.client.ClientRingDynamics;
import ke.client.ClientRingStateParser;
import ke.data.Action;
import ke.data.CONSTANT;
import ke.history.History;
import ca.ualberta.cs.poker.free.client.PokerClient;
import ca.ualberta.cs.poker.free.dynamics.LimitType;
import ca.ualberta.cs.poker.free.dynamics.MatchType;

/**
 * An extension of PokerClient that contains a reference to a reproduction 
 * of what is happening on the server side (state).
 *
 * As before, actions can be taken with sendFold, sendCall(), and sendRaise()
 * @author Kami II
 * @author FG KE
 */
public abstract class SimplePokerClient extends PokerClient {

	/**
     * A reproduction of what is happening on the server side.
     */
    public ClientRingDynamics state;
    
    /**
     * stores a complete history of all previous game rounds
     */
    public History history;
    
    /** 
     * Creates a new instance of SimplePokerClient. Must call connect(), then run() to start process 
     */
    public SimplePokerClient(){
        state = null;
        history = History.getHistory();
    }
    
    
    /** 
     * Handles the state change. 
     * Updates state and calls takeAction()
     */
    public synchronized void handleStateChange(){

    	if (state == null) {
    		set_up_new_state_object();
    	}
    	
        state.setFromMatchStateMessage(currentGameStateString);
       	
        if (state.isOurTurn()){
            reconsider_state_and_make_a_move();
        }
        else {
        	reconsider_state();
        }
    }
    
    
    
    public void set_up_new_state_object() {
    	ClientRingStateParser crsp = new ClientRingStateParser();
		crsp.parseMatchStateMessage(currentGameStateString);
		MatchType mt = new MatchType(LimitType.LIMIT, false, 8000, 1000);
		CONSTANT.PLAYER_COUNT = crsp.numPlayers;
		CONSTANT.AGGRESSIVE_PREFLOP = new double[crsp.numPlayers];
		CONSTANT.AGGRESSIVE_RAISE = new double[crsp.numPlayers];
		for(int i = 0; i < crsp.numPlayers; i++) {
			CONSTANT.AGGRESSIVE_PREFLOP[i] = CONSTANT.A_PREFLOP;
			CONSTANT.AGGRESSIVE_RAISE[i] = CONSTANT.A_RAISE;
		}
		state = new ClientRingDynamics(crsp.numPlayers, mt, crsp);
		state.setParser(crsp);
		state.addStateChangeListener(history);
    }

    public void check_state() {
    	// make sure everything's fine with tracked state (should never be true)
       	if (!state.getMatchState(state.seatTaken).equals(currentGameStateString)) {
       		System.err.println("BADMATCHSTATESTRING: ");
       		System.err.println("     Localstate : " + state.getMatchState(state.seatTaken));
       		System.err.println("     From Server: " + currentGameStateString);
       	}
    }

    /**
     *  analyses state and history the then calls 
     *  sendFold(), sendCall, or sendRaise() 
     */
    public abstract void reconsider_state_and_make_a_move();

    
    /**
     *  silently analyses state and history 
     *   
     */
    public abstract void reconsider_state();

    
    /**
     * triggers an action to the server
     * @param a
     */
    public void send_action(Action a){
    	try {
    		if (a == Action.RAISE)
    			sendRaise();
    		else if (a == Action.CALL)
    			sendCall();
    		else
    			sendFold();
    	
    	} catch(Exception e) {
    		System.out.println(e.getMessage());
    		e.printStackTrace();
    	}
    }

}

